package com.techsophy.tsf.workflow.engine.camunda.service.impl;

import com.techsophy.tsf.workflow.engine.camunda.config.KeycloakClientConfig;
import com.techsophy.tsf.workflow.engine.camunda.config.TenantAuthenticationManagerResolver;
import com.techsophy.tsf.workflow.engine.camunda.service.TokenSupplier;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.keycloak.authorization.client.AuthzClient;
import org.keycloak.authorization.client.util.TokenCallable;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import java.lang.reflect.InvocationTargetException;

/**
 * get token with new time stamp
 */
@Component
@Profile("!test")
public class TokenSupplierImpl implements TokenSupplier
{
    private final TokenCallable tokenCallable;

    public TokenSupplierImpl(KeycloakClientConfig config) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
    {
        // unfortunate that we have to resort to reflection but 'TokenCallable' is quite useful so it's ok
        this.tokenCallable = (TokenCallable) MethodUtils.invokeMethod(AuthzClient.create(config), true, "createPatSupplier");
    }

    public String getToken()
    {
        String tenant = TenantAuthenticationManagerResolver.TENANT_CONTEXT.get();

        if(tenant.equalsIgnoreCase("medunited")){
            return "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI2aFdhRlduZnpiOEpiS0lNWnZxa1F4MEhEbkFJalZRRjFOYnQxRVNVV0NBIn0.eyJleHAiOjE2ODE5MDk1NTEsImlhdCI6MTY4MTkwNzc1MSwianRpIjoiOTk5ZWVmNjktY2NiMS00Y2EzLWIzYWEtMjdkNGY2Y2M4OTkzIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLWNtLnRlY2hzb3BoeS5jb20vYXV0aC9yZWFsbXMvbWVkdW5pdGVkIiwiYXVkIjpbInJlYWxtLW1hbmFnZW1lbnQiLCJhY2NvdW50Il0sInN1YiI6IjE3MjJhNDAxLWE2ZmMtNDAxNy04MDU5LTg4NzI5MTc3ZmExMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImNhbXVuZGEtaWRlbnRpdHktc2VydmljZSIsInNlc3Npb25fc3RhdGUiOiIxMGRiNDU3Ni1lODU2LTQ3ZTYtYjdmMi0wMzBiMGVmOTc3MGYiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHBzOi8vcmVwb3J0LWNtLnRlY2hzb3BoeS5jb20iLCJodHRwczovL3dvcmtmbG93LWNtLnRlY2hzb3BoeS5jb20iLCJodHRwczovL2F1Z21udC1jbS50ZWNoc29waHkuY29tIiwiaHR0cDovL2xvY2FsaG9zdDo5MDgwIiwiKiIsImh0dHBzOi8vYXdnbWVudC1jbS50ZWNoc29waHkuY29tIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyIsInF1ZXJ5LXVzZXJzIl19LCJjYW11bmRhLWlkZW50aXR5LXNlcnZpY2UiOnsicm9sZXMiOlsiYXdnbWVudC11eC1jb250cm9sbGVyLWFsbCIsImF3Z21lbnQtcnVudGltZS1mb3JtLWFsbCIsInRhc2stbWFuYWdlbWVudC1hZG1pbiIsImF3Z21lbnQtd29ya2Zsb3ctYWxsIiwiYXdnbWVudC1ub3RpZmljYXRpb24tYWxsIiwiYXdnbWVudC1mb3JtLWFsbCIsIkFkbWluIiwidGFzay1tYW5hZ2VtZW50LWNyZWF0ZS1vci11cGRhdGUiLCJhd2dtZW50LXJ1bnRpbWUtdGVtcGxhdGUtYWxsIiwiYXdnbWVudC11dGlsLWFsbCIsInRhc2stbWFuYWdlbWVudCIsInRhc2stbWFuYWdlbWVudC1yZWFkIiwiYXdnbWVudC1kbXMtYWxsIiwidGFzay1tYW5hZ2VtZW50LWFsbC1tZW51cyIsImF3Z21lbnQtZG9jdW1lbnQtY29udmVydGVyLWFsbCIsImF3Z21lbnQtYWNjb3VudC1hbGwiLCJhd2dtZW50LXRlbXBsYXRlcy1hbGwiLCJhdWdtbnQtZm9ybS1hbGwiXX0sIiR7Y2xpZW50X2lkfSI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgYXdnbWVudCBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6ImFkbWluIGFkbWluIiwiZ3JvdXBzIjpbIi9jYW11bmRhLWFkbWluIiwiL3Rhc2stbWFuYWdlbWVudC1hZG1pbiIsIi90YXNrLW1hbmFnZW1lbnQtbWFuYWdlciIsIi90YXNrLW1hbmFnZW1lbnQtdXNlciIsIi90cy11c2VyIl0sInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluIiwiZ2l2ZW5fbmFtZSI6ImFkbWluIiwiZmFtaWx5X25hbWUiOiJhZG1pbiJ9.ddYdLYJSlYFydSWpLisphVEf3fYCE5hdJ--xWHUmL3oBzDNxs6k5YDqJfyTeTTb4n8aJwoldquKv-JZALMY9abdFkzHogfnJyGQ1fGnJNgKjmQR1ZFGAzkxTDlW8tAobtqPPlHFl4xHwtPoAaj9xnzocnnTxmuqb6n5bUGHjR5sKdFc3PrZUyZYLUWSriHDFVERcpqP5PTXJJ_ZALhHLN_GBKNoBV9bWYEJyAO7RO70cNwdzc71OZ06DZdv7DUYD_JiSlwskikSlVHsFhlW86iAYha3zSLG4HiEjt7hAMWRchX1pWY8_rkaI34_i26TSqNdU-yiMvyB4s2jPZxudjA";
        }
        // will cache token and automatically refresh when expired
        return this.tokenCallable.call();
    }
}
